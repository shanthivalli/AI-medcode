@use 'variables' as *;

/* Resets button styles */
@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
  outline: none;
}

/* Basic Card Styling (Modern) */
@mixin card-base {
  background-color: $color-white;
  border-radius: $border-radius-base;
  box-shadow: $shadow-sm;
  padding: $spacing-md;
  transition: $transition-shadow;

  &:hover {
    box-shadow: $shadow-md;
  }
}

/* Flexbox centering */
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Responsive media query helper */
@mixin respond-to($breakpoint) {
  @if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) { @content; }
  }
  @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) { @content; }
  }
  @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  }
  @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) { @content; }
  }
}

/* Focus Visible Styling (Accessibility) - Ring Style */
@mixin focus-ring {
  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px $color-white, 0 0 0 4px $color-primary;
  }
}

/* Modern Input Underline/Border Style (if used) */
@mixin input-underline {
  border: none;
  border-bottom: 2px solid $color-border;
  padding: $spacing-xs 0;
  transition: $transition-color;

  &:focus {
    border-color: $color-primary;
  }
}

/* Subtle Scrollbar */
@mixin subtle-scrollbar {
  &::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background-color: rgba($color-dark, 0.2);
    border-radius: 4px;
    border: 2px solid transparent;
    background-clip: padding-box;

    &:hover {
      background-color: rgba($color-dark, 0.3);
    }
  }
}

/* Slide-in animation base (used by EncounterSlider) */
@mixin slide-in($direction: 'right', $duration: 0.3s) {
  @keyframes slideIn#{$direction} {
    from {
      transform: translateX(if($direction == 'right', 100%, -100%));
    }
    to {
      transform: translateX(0);
    }
  }

  animation: slideIn#{$direction} $duration ease-out;
}

/* Flexbox utilities */
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

/* Typography utilities */
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Interactive states */
@mixin interactive-states {
  transition: $transition-base;
  cursor: pointer;

  &:hover {
    opacity: 0.8;
  }

  &:active {
    opacity: 0.9;
  }
}

@mixin media-breakpoint-down($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: ($breakpoint-sm - 1)) { @content; }
  } @else if $breakpoint == sm {
    @media (max-width: ($breakpoint-md - 1)) { @content; }
  } @else if $breakpoint == md {
    @media (max-width: ($breakpoint-lg - 1)) { @content; }
  } @else if $breakpoint == lg {
    @media (max-width: ($breakpoint-xl - 1)) { @content; }
  } @else if $breakpoint == xl {
    @media (max-width: $breakpoint-xl) { @content; }
  }
}

@mixin media-breakpoint-up($breakpoint) {
  @if $breakpoint == xs {
    @media (min-width: $breakpoint-xs) { @content; }
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) { @content; }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) { @content; }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) { @content; }
  }
}